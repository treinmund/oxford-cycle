tti_min = min(travel_time_index, na.rm = TRUE)
)
central_plot_median <- create_traffic_map(central_tti, central_basemap, "tti_median")
central_plot_max <- create_traffic_map(central_tti, central_basemap, "tti_max")
central_plot_min <- create_traffic_map(central_tti, central_basemap, "tti_min")
central_plot_median
central_plot_max
central_plot_min
# Create a constant scale for plots
get_shared_scale <- function(..., scale) {
if (!inherits(scale$range, "RangeContinuous"))
stop("Supplied scale needs to be continuous")
plots <- list(...)
ranges <- purrr::map(plots, ~simple_range_extracter(., scale))
scale$limits <- range(unlist(ranges))
scale
}
# Given a plot and a scale, get the range of the values used in the scale for that plot
#   Not really intended for users
simple_range_extracter <- function(p, scale) {
d <- ggplot2::ggplot_build(p)
p_range <- d$plot$scales$get_scales(scale$aesthetics)$range
if (!inherits(p_range, "RangeContinuous"))
stop("Plot's scale for `", scale$aesthetics,
"` is not continuous")
p_range$range
}
# Given the unquoted variable names of a bunch of plots that have been
#   saved to the current environment, and a scale that you want to apply
#   to them, this will call `get_shared_scale()` using those plots and scale
#   add that scale to the plots, and then assign these new plots to those
#   variable names, essentially editing the plots 'in place'
set_scale_union <- function(..., scale) {
exprs <- rlang::enexprs(...)
scale <- get_shared_scale(..., scale = scale)
var_nms <- purrr::map_chr(exprs, rlang::as_name)
edit_plots_in_place(var_nms, env = parent.frame(),
scale = scale)
# Invisibly return the scale, in case you need it later
invisible(scale)
}
# A sub-function. *Definitely* not intended for users
edit_plots_in_place <- function(names, env, scale) {
vars <- rlang::env_has(env = env, nms = names)
if (!all(vars))
stop("Environment does not have variables for ",
paste(names(vars[!vars]), collapse=", "))
purrr:::walk(names, function(nm) {
og_plot <- rlang::env_get(env, nm = nm)
message("Changing plot `", nm, "`")
# Muffles messages about already having scales
withCallingHandlers(
assign(x = nm, envir = env,
value = og_plot + scale),
message = function(err) {
if (grepl("already present", err$message))
invokeRestart("muffleMessage")
})
})
}
# Test of function
simple_range_extracter(north_plot_median, scale_color_vidiridis_c())
# Test of function
simple_range_extracter(north_plot_median, scale_color_viridis_c())
# Test of function
simple_range_extracter(north_plot_median, scale_color_viridis())
# Test of function
simple_range_extracter(north_plot_median, scale_color_viridis_d())
# Test of function
simple_range_extracter(north_plot_median, scale_color_discrete())
# Test of function
north_plot_median
# Test of function
simple_range_extracter(north_plot_median)
# Test of function
simple_range_extracter(north_plot_median, scale_y_continuous())
# Test of function
p <- north_plot_median
ggplot2::ggplot_build(p)
ggplot2::ggplot_build(p)$plot
ggplot2::ggplot_build(p)$plot$scales
ggplot2::ggplot_build(p)$plot$scales$get_scales
ggplot2::ggplot_build(p)$plot$scales$get_scales(scale$aesthetics)$range
ggplot2::ggplot_build(p)$plot$scales$get_scales(scale$aesthetics)
ggplot2::ggplot_build(p)$plot$scales$get_scales
# Function for traffic maps
create_traffic_map <- function(df, basemap, measure, linewidth = 2, name) {
traffic_map <- basemap +
geom_sf(data = df,
aes(color = !!sym(measure)),
inherit.aes = FALSE,
linewidth = 2) +
scale_color_viridis_c(option = "plasma",
name = name) +
theme_void()
return(traffic_map)
}
north_plot_median <- create_traffic_map(north_tti, north_basemap, "tti_median", "Median TTI")
north_plot_median <- create_traffic_map(north_tti, north_basemap, "tti_median", name = "Median TTI")
north_plot_median
# Function for traffic maps
create_traffic_map <- function(df, basemap, measure, linewidth = 2, name = "TTI") {
traffic_map <- basemap +
geom_sf(data = df,
aes(color = !!sym(measure)),
inherit.aes = FALSE,
linewidth = 2) +
scale_color_viridis_c(option = "plasma",
name = name) +
theme_void()
return(traffic_map)
}
## North Route
north_tti <- north_df |>
filter(!is.na(travel_time_index)) |>
group_by(id, start_geocode, end_geocode, geometry) |>
summarise(
tti_median = median(travel_time_index, na.rm = TRUE),
tti_max = max(travel_time_index, na.rm = TRUE),
tti_min = min(travel_time_index, na.rm = TRUE)
) |>
filter(id != 26) # This segment was removed from the path
segment_index <- north_tti[north_tti$id == 16, ]
coords <- st_coordinates(segment_index)
coords[1, "X"] <- coords[1, "X"] - 0.001
coords[2, "X"] <- coords[1, "X"] + 0.001
new_geom <- st_linestring(coords[, c("X", "Y")])
north_tti[north_tti$id == 16, ]$geometry <- st_sfc(new_geom, crs = st_crs(north_tti))
north_plot_median <- create_traffic_map(north_tti, north_basemap, "tti_median", name = "TTI")
north_plot_max <- create_traffic_map(north_tti, north_basemap, "tti_max", name = "Max TTI")
north_plot_min <- create_traffic_map(north_tti, north_basemap, "tti_min", name = "Min TTI")
## South Route
south_tti <- south_df |>
filter(!is.na(travel_time_index)) |>
group_by(id, start_geocode, end_geocode, geometry) |>
summarise(
tti_median = median(travel_time_index, na.rm = TRUE),
tti_max = max(travel_time_index, na.rm = TRUE),
tti_min = min(travel_time_index, na.rm = TRUE)
)
south_plot_median <- create_traffic_map(south_tti, south_basemap, "tti_median", name = "TTI")
south_plot_max <- create_traffic_map(south_tti, south_basemap, "tti_max", name = "Max TTI")
south_plot_min <- create_traffic_map(south_tti, south_basemap, "tti_min", name = "Min TTI")
## Central Route
central_tti <- central_df |>
filter(!is.na(travel_time_index) & id != 9) |>
group_by(id, start_geocode, end_geocode, geometry) |>
summarise(
tti_median = median(travel_time_index, na.rm = TRUE),
tti_max = max(travel_time_index, na.rm = TRUE),
tti_min = min(travel_time_index, na.rm = TRUE)
)
central_plot_median <- create_traffic_map(central_tti, central_basemap, "tti_median", name = "TTI")
central_plot_max <- create_traffic_map(central_tti, central_basemap, "tti_max", name = "Max TTI")
central_plot_min <- create_traffic_map(central_tti, central_basemap, "tti_min", name = "Min TTI")
ggsave(paste0(fig_path, "north_map_median.png"), plot = north_plot_median, width = 10, height = 8, units = "in")
ggsave(paste0(fig_path, "central_map_median.png"), plot = central_plot_median, width = 10, height = 8, units = "in")
ggsave(paste0(fig_path, "south_map_median.png"), plot = south_plot_median, width = 10, height = 8, units = "in")
get_shared_scale <- function(..., scale) {
if (!inherits(scale$range, "RangeContinuous"))
stop("Supplied scale needs to be continuous")
plots <- list(...)
ranges <- purrr::map(plots, ~simple_range_extracter(., scale))
scale$limits <- range(unlist(ranges))
scale
}
# Given a plot and a scale, get the range of the values used in the scale for that plot
#   Not really intended for users
simple_range_extracter <- function(p, scale) {
d <- ggplot2::ggplot_build(p)
p_range <- d$plot$scales$get_scales(scale$aesthetics)$range
if (!inherits(p_range, "RangeContinuous"))
stop("Plot's scale for `", scale$aesthetics,
"` is not continuous")
p_range$range
}
# Given the unquoted variable names of a bunch of plots that have been
#   saved to the current environment, and a scale that you want to apply
#   to them, this will call `get_shared_scale()` using those plots and scale
#   add that scale to the plots, and then assign these new plots to those
#   variable names, essentially editing the plots 'in place'
set_scale_union <- function(..., scale) {
exprs <- rlang::enexprs(...)
scale <- get_shared_scale(..., scale = scale)
var_nms <- purrr::map_chr(exprs, rlang::as_name)
edit_plots_in_place(var_nms, env = parent.frame(),
scale = scale)
# Invisibly return the scale, in case you need it later
invisible(scale)
}
# A sub-function. *Definitely* not intended for users
edit_plots_in_place <- function(names, env, scale) {
vars <- rlang::env_has(env = env, nms = names)
if (!all(vars))
stop("Environment does not have variables for ",
paste(names(vars[!vars]), collapse=", "))
purrr:::walk(names, function(nm) {
og_plot <- rlang::env_get(env, nm = nm)
message("Changing plot `", nm, "`")
# Muffles messages about already having scales
withCallingHandlers(
assign(x = nm, envir = env,
value = og_plot + scale),
message = function(err) {
if (grepl("already present", err$message))
invokeRestart("muffleMessage")
})
})
}
# Examples -------------------------------------------------
# Make the plots
p1 <- data.frame(x = runif(400),
y = runif(400)) %>%
ggplot(aes(x, y)) +
stat_density_2d(geom = "raster",
aes(fill = after_stat(density)),
contour = FALSE) +
scale_fill_viridis_c("z") +
theme(legend.position = "bottom")
p2 <- data.frame(x = c(runif(200), runif(200, 0.25, 0.75)),
y = c(runif(200), runif(200, 0.25, 0.75))) %>%
ggplot(aes(x, y)) +
stat_density_2d(geom = "raster",
aes(fill = after_stat(density)),
contour = FALSE) +
scale_fill_viridis_c("z") +
theme(legend.position = "bottom")
# The color scales don't match:
p1
p2
# I'm setting the scale I want to eventually use as a variable
#   so I don't have to keep retyping it for these examples
my_viridis_scale <- scale_fill_viridis_c(name = "z")
# Test the range:
simple_range_extracter(p1, my_viridis_scale)
get_shared_scale <- function(..., scale) {
if (!inherits(scale$range, "RangeContinuous"))
stop("Supplied scale needs to be continuous")
plots <- list(...)
ranges <- purrr::map(plots, ~simple_range_extracter(., scale))
scale$limits <- range(unlist(ranges))
scale
}
# Given a plot and a scale, get the range of the values used in the scale for that plot
#   Not really intended for users
simple_range_extracter <- function(p, scale) {
d <- ggplot2::ggplot_build(p)
p_range <- d$plot$scales$get_scales(scale$aesthetics)$range
#if (!inherits(p_range, "RangeContinuous"))
#  stop("Plot's scale for `", scale$aesthetics,
#       "` is not continuous")
p_range$range
}
# Given the unquoted variable names of a bunch of plots that have been
#   saved to the current environment, and a scale that you want to apply
#   to them, this will call `get_shared_scale()` using those plots and scale
#   add that scale to the plots, and then assign these new plots to those
#   variable names, essentially editing the plots 'in place'
set_scale_union <- function(..., scale) {
exprs <- rlang::enexprs(...)
scale <- get_shared_scale(..., scale = scale)
var_nms <- purrr::map_chr(exprs, rlang::as_name)
edit_plots_in_place(var_nms, env = parent.frame(),
scale = scale)
# Invisibly return the scale, in case you need it later
invisible(scale)
}
# A sub-function. *Definitely* not intended for users
edit_plots_in_place <- function(names, env, scale) {
vars <- rlang::env_has(env = env, nms = names)
if (!all(vars))
stop("Environment does not have variables for ",
paste(names(vars[!vars]), collapse=", "))
purrr:::walk(names, function(nm) {
og_plot <- rlang::env_get(env, nm = nm)
message("Changing plot `", nm, "`")
# Muffles messages about already having scales
withCallingHandlers(
assign(x = nm, envir = env,
value = og_plot + scale),
message = function(err) {
if (grepl("already present", err$message))
invokeRestart("muffleMessage")
})
})
}
# Examples -------------------------------------------------
# Make the plots
p1 <- data.frame(x = runif(400),
y = runif(400)) %>%
ggplot(aes(x, y)) +
stat_density_2d(geom = "raster",
aes(fill = after_stat(density)),
contour = FALSE) +
scale_fill_viridis_c("z") +
theme(legend.position = "bottom")
p2 <- data.frame(x = c(runif(200), runif(200, 0.25, 0.75)),
y = c(runif(200), runif(200, 0.25, 0.75))) %>%
ggplot(aes(x, y)) +
stat_density_2d(geom = "raster",
aes(fill = after_stat(density)),
contour = FALSE) +
scale_fill_viridis_c("z") +
theme(legend.position = "bottom")
# The color scales don't match:
p1
p2
# I'm setting the scale I want to eventually use as a variable
#   so I don't have to keep retyping it for these examples
my_viridis_scale <- scale_fill_viridis_c(name = "z")
# Test the range:
simple_range_extracter(p1, my_viridis_scale)
simple_range_extracter(north_plot_median, my_viridis_scale)
# I'm setting the scale I want to eventually use as a variable
#   so I don't have to keep retyping it for these examples
my_viridis_scale <- scale_fill_viridis_c(name = "plasma")
simple_range_extracter(north_plot_median, my_viridis_scale)
global_min <- min(north_tti$tti_median,
central_tti$tti_median,
south_tti$tti_median)
global_max <- max(north_tti$tti_median,
central_tti$tti_median,
south_tti$tti_median)
# Function for traffic maps
create_traffic_map <- function(df, basemap, measure, linewidth = 2, name = "TTI") {
traffic_map <- basemap +
geom_sf(data = df,
aes(color = !!sym(measure)),
inherit.aes = FALSE,
linewidth = 2) +
scale_color_viridis_c(option = "plasma",
name = name,
limits = c(global_min, global_max)) +
theme_void()
return(traffic_map)
}
global_min <- min(north_tti$tti_median,
central_tti$tti_median,
south_tti$tti_median)
global_max <- max(north_tti$tti_median,
central_tti$tti_median,
south_tti$tti_median)
## North Plot
#### Make adjustments to the geometry of the segment with id 16
segment_index <- north_tti[north_tti$id == 16, ]
coords <- st_coordinates(segment_index)
coords[1, "X"] <- coords[1, "X"] - 0.001
coords[2, "X"] <- coords[1, "X"] + 0.001
new_geom <- st_linestring(coords[, c("X", "Y")])
north_tti[north_tti$id == 16, ]$geometry <- st_sfc(new_geom, crs = st_crs(north_tti))
north_plot_median <- create_traffic_map(north_tti, north_basemap, "tti_median", name = "TTI")
## Central Plot
central_plot_median <- create_traffic_map(central_tti, central_basemap, "tti_median", name = "TTI")
## South Plot
south_plot_median <- create_traffic_map(south_tti, south_basemap, "tti_median", name = "TTI")
north_plot_median
central_plot_median
south_plot_median
# Define input, output, and figure directories for reproducibility
# Ensure these directories exist before running the script
in_path <- "../input/"     # Path to input data files
out_path <- "../results/"  # Path to save results
fig_path <- "../figures/"  # Path to save figures
plot_df <- read_rds(paste0(out_path, "processed/", "geocoded_traffic.rds"))
# Exclude weekends
plot_df <- plot_df |>
filter(day != "Sat" & day != "Sun")
# Recode route names to align with paper
## North -> North
## South -> Central
## East -> South
# Create dataframe subsets
north_df <- plot_df |>
filter(route == "North")
central_df <- plot_df |>
filter(route == "South") |>
mutate(route = case_match(route,
"South" ~ "Central")
)
south_df <- plot_df |>
filter(route == "East") |>
mutate(route = case_match(route,
"East" ~ "South")
)
plot_df <- bind_rows(north_df, central_df, south_df)
# Plot the distribution of traffic duration
plot_df |>
ggplot(aes(x = traffic_duration_min)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Traffic Duration Distribution",
x = "Traffic Duration (minutes)",
y = "Frequency") +
theme_minimal()
## North Route
north_tti <- north_df |>
filter(!is.na(travel_time_index)) |>
group_by(id, start_geocode, end_geocode, geometry) |>
summarise(
tti_median = median(travel_time_index, na.rm = TRUE),
tti_max = max(travel_time_index, na.rm = TRUE),
tti_min = min(travel_time_index, na.rm = TRUE)
) |>
filter(id != 26) # This segment was removed from the path
#### Make adjustments to the geometry of the segment with id 16
segment_index <- north_tti[north_tti$id == 16, ]
coords <- st_coordinates(segment_index)
coords[1, "X"] <- coords[1, "X"] - 0.001
coords[2, "X"] <- coords[1, "X"] + 0.001
new_geom <- st_linestring(coords[, c("X", "Y")])
north_tti[north_tti$id == 16, ]$geometry <- st_sfc(new_geom, crs = st_crs(north_tti))
## South Route
south_tti <- south_df |>
filter(!is.na(travel_time_index)) |>
group_by(id, start_geocode, end_geocode, geometry) |>
summarise(
tti_median = median(travel_time_index, na.rm = TRUE),
tti_max = max(travel_time_index, na.rm = TRUE),
tti_min = min(travel_time_index, na.rm = TRUE)
)
## Central Route
central_tti <- central_df |>
filter(!is.na(travel_time_index) & id != 9) |>
group_by(id, start_geocode, end_geocode, geometry) |>
summarise(
tti_median = median(travel_time_index, na.rm = TRUE),
tti_max = max(travel_time_index, na.rm = TRUE),
tti_min = min(travel_time_index, na.rm = TRUE)
)
get_osm_basemap <- function(df) {
# Extract bounding box
bbox <- st_bbox(df)
# Set up OSM features query - only select features we want to display
# Note: No "name" tag is queried, so road names won't be included
# Get road network (without names)
roads <- bbox %>%
opq() %>%
add_osm_feature(key = "highway") %>%
osmdata_sf()
# Get building footprints
buildings <- bbox %>%
opq() %>%
add_osm_feature(key = "building") %>%
osmdata_sf()
# Create base ggplot map
basemap <- ggplot() +
# Roads (by type)
geom_sf(data = roads$osm_lines[roads$osm_lines$highway %in% c("motorway", "trunk", "primary"), ],
color = "gray40", size = 0.8) +
geom_sf(data = roads$osm_lines[roads$osm_lines$highway %in% c("secondary", "tertiary"), ],
color = "gray50", size = 0.5) +
geom_sf(data = roads$osm_lines[roads$osm_lines$highway %in% c("residential", "service", "unclassified"), ],
color = "gray70", size = 0.2) +
# Buildings (gray)
geom_sf(data = buildings$osm_polygons, fill = "gray85", color = NA) +
# Styling
coord_sf(xlim = c(bbox["xmin"], bbox["xmax"]),
ylim = c(bbox["ymin"], bbox["ymax"])) +
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.margin = margin(0, 0, 0, 0)
)
return(basemap)
}
# Get basemap for each route
north_basemap <- get_osm_basemap(north_df)
central_basemap <- get_osm_basemap(central_df)
south_basemap <- get_osm_basemap(south_df)
# Function for traffic maps
create_traffic_map <- function(df, basemap, measure, linewidth = 2, name = "TTI") {
traffic_map <- basemap +
geom_sf(data = df,
aes(color = !!sym(measure)),
inherit.aes = FALSE,
linewidth = 2) +
scale_color_viridis_c(option = "plasma",
name = name,
limits = c(global_min, global_max)) +
theme_void()
return(traffic_map)
}
global_min <- min(north_tti$tti_median,
central_tti$tti_median,
south_tti$tti_median)
global_max <- max(north_tti$tti_median,
central_tti$tti_median,
south_tti$tti_median)
## North Plot
north_plot_median <- create_traffic_map(north_tti, north_basemap, "tti_median", name = "TTI")
## Central Plot
central_plot_median <- create_traffic_map(central_tti, central_basemap, "tti_median", name = "TTI")
## South Plot
south_plot_median <- create_traffic_map(south_tti, south_basemap, "tti_median", name = "TTI")
north_plot_median
central_plot_median
south_plot_median
## North Plot
north_plot_median <- create_traffic_map(north_tti, north_basemap, "tti_median", name = "TTI")
## Central Plot
central_plot_median <- create_traffic_map(central_tti, central_basemap, "tti_median", name = "TTI")
## South Plot
south_plot_median <- create_traffic_map(south_tti, south_basemap, "tti_median", name = "TTI")
ggsave(paste0(fig_path, "north_map_median.png"), plot = north_plot_median, width = 10, height = 8, units = "in")
ggsave(paste0(fig_path, "central_map_median.png"), plot = central_plot_median, width = 10, height = 8, units = "in")
ggsave(paste0(fig_path, "south_map_median.png"), plot = south_plot_median, width = 10, height = 8, units = "in")
## North Plot
north_plot_median <- create_traffic_map(north_tti, north_basemap, "tti_median", name = "Travel Time Index")
ggsave(paste0(fig_path, "north_map_median.png"), plot = north_plot_median, width = 10, height = 8, units = "in")
