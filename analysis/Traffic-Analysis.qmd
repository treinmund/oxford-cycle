---
title: "robotcycle-trafficanalysis"
format: html
---


# Set-up

## Load Packages

```{r}
# Load required packages. If a package is missing, install it first.
packages <- c("httr", "jsonlite", "tidyverse", "lubridate", "keyring")

# Install missing packages
missing_packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(missing_packages)) install.packages(missing_packages)

# Load all packages
lapply(packages, library, character.only = TRUE)
```

## Set File Paths

```{r}
# Define input, output, and figure directories for reproducibility
# Ensure these directories exist before running the script

in_path <- "../data"       # Path to input data files
out_path <- "../results/"  # Path to save results
fig_path <- "../figures/"  # Path to save figures
```

# Define Functions

## Google Maps Traffic Layer

```{r}
generate_map_html <- function(lat, lng, file_name = "traffic_map.html") {
  # Function to generate an HTML file displaying a Google Maps traffic layer.
  #
  # Args:
  #   lat: Numeric. Latitude of the location.
  #   lng: Numeric. Longitude of the location.
  #   file_name: Character. Name of the output HTML file (default: "traffic_map.html").
  #
  # Returns:
  #   Saves an HTML file with an embedded Google Map showing traffic data.
  
  # Retrieve the Google API key securely from the keyring
  google_key <- keyring::key_get(service = "google_api", username = "default")
  
  # Ensure API key is available
  if (is.null(google_key) || google_key == "") {
    stop("Google API key is missing. Add it using keyring::key_set().")
  }
  
  # Define the HTML template
  html_template <- sprintf(
    '<!DOCTYPE html>
    <html>
      <head>
        <title>Google Maps Traffic Layer</title>
        <meta name="viewport" content="initial-scale=1.0">
        <meta charset="utf-8">
        <style>
          #map { height: 100%%; }
          html, body { height: 100%%; margin: 0; padding: 0; }
        </style>
        <script src="https://maps.googleapis.com/maps/api/js?key=%s"></script>
        <script>
          function initMap() {
            var location = {lat: %f, lng: %f};
            var map = new google.maps.Map(document.getElementById("map"), {
              zoom: 14,
              center: location
            });
            var trafficLayer = new google.maps.TrafficLayer();
            trafficLayer.setMap(map);
          }
        </script>
      </head>
      <body onload="initMap()">
        <div id="map"></div>
      </body>
    </html>', google_key, lat, lng)
  
  # Save the HTML file
  writeLines(html_template, file_name)
  message("Map saved as ", file_name)
}
```


## Google Maps Distance Matrix API Function

```{r}
get_distance_matrix <- function(origin, destination, departure_time) {
  # Function to retrieve traffic duration from Google Maps Distance Matrix API
  # Arg: origin (character) - the starting location
  # Arg: destination (character) - the destination location
  # Arg: departure_time (character) - the departure time for the trip
  
  
  # Add a delay to avoid hitting the API rate limit
  Sys.sleep(0.5)
  
  # Construct the API request URL
  url <- paste0(
    "https://maps.googleapis.com/maps/api/distancematrix/json?",
    "origins=", URLencode(origin, reserved = TRUE),
    "&destinations=", URLencode(destination, reserved = TRUE),
    "&departure_time=", URLencode(departure_time),
    "&traffic_model=best_guess",  # Use "best_guess", "pessimistic", or "optimistic"
    "&key=", google_key
  )
  
  # Print URL for troubleshooting
  print(url)
  
  # Use tryCatch to handle errors
  result <- tryCatch({
    
    # Make the GET request to the Google Maps API
    response <- GET(url)
    
    # Check if the request was successful
    if (status_code(response) != 200) {
      warning("Failed to retrieve data from Google API. Status code: ", status_code(response))
      print(url)
    }
    
    # Parse the response content
    data <- content(response, as = "parsed")
    
    # Extract traffic data (duration and distance with traffic)
    if (is.null(data$rows[[1]]$elements[[1]]$duration_in_traffic)) {
      warning("No traffic data available for the specified route.")
      return(NULL)
    }
    
    destination_address <- data$destination_addresses[[1]]
    traffic_duration <- data$rows[[1]]$elements[[1]]$duration_in_traffic$value # Traffic duration in seconds
    duration <- data$rows[[1]]$elements[[1]]$duration$value  # Duration without traffic in seconds
    distance <- data$rows[[1]]$elements[[1]]$distance$value  # Distance in meters
    
    # Convert seconds to minutes for readability
    traffic_duration_min <- traffic_duration / 60
    duration_min <- duration / 60
    
    # Return a list with traffic data
    list(
      origin = origin,
      destination = destination,
      traffic_duration_min = traffic_duration_min,
      distance_meters = distance,
      duration_min = duration_min
    )
  }, 
  error = function(e) {
    # Handle errors by returning a message and the error details
    message("An error occurred: ", e$message)
    return(list(
      origin = origin,
      destination = destination,
      traffic_duration_min = NA,
      distance_meters = NA,
      duration_min = NA,
      error_message = e$message
    ))
  })
  return(result)
}

```

## Example usage of the function

```{r}
## Set the origin, destination, and departure time
origin <- "William Baker House, Broad St, Oxford OX1 3AF"  # Example: Oxford, UK (latitude,longitude)
destination <- "11-12 Broad St, Oxford OX1 3AS"  # Example: London, UK (latitude,longitude)
departure_time <- "now"  # Example: "now" or a Unix timestamp

## Get traffic data
traffic_data <- get_distance_matrix(origin, destination, departure_time)
print(traffic_data)
```

## Traffic Severity Measures

```{r}
## Traffic Delay Ratio (TDR)
### Argument: duration with traffic, free flow duration
### Returns: percentage increase in travel time due to traffic
### Source: 
traffic_delay_ratio <- function(traffic_duration_min, duration) {
  ((traffic_duration_min - duration) / duration) * 100
}

## Travel Time Index (TTI)
### Argument: duration with traffic, free flow duration
### Returns: quantity that compares travel conditions with and without traffic
### Source: https://www.bts.gov/content/travel-time-index
travel_time_index <- function(traffic_duration_min, duration) {
  traffic_duration_min / duration
}
```

## Timestamp Sampling Function

```{r}
create_sample_timestamps <- function(year, times, sample_size = NULL) {
  # This function creates a dataframe of sampled timestamps which will be used for estimating traffic levels
  # at different times of the day throughout the year.
  # Arg: year (numeric) - the year for which to generate timestamps
  # Arg: times (character vector) - the times of day to sample
  # Arg: sample_size (numeric, optional) - the number of dates to sample for each day of the week
  
  # Generate a sequence of dates for the entire year
  dates <- seq.Date(from = as.Date(paste0(year, "-01-01")),
                    to = as.Date(paste0(year, "-12-31")),
                    by = "day")
  
  # Check if sample_size argument is provided
  if (missing(sample_size)) {
    sample_size <- length(dates)
  }
  
  # Select random sample of dates for each day of week
  sample_dates <- dates |>
    as_tibble() |>
    mutate(day = wday(value, label = TRUE)) |>
    group_by(day) |>
    sample_n(sample_size) |>
    pull(value)

  # Create a dataframe by combining dates and times
  timestamps_df <- expand.grid(date = sample_dates, time = times) |>
    # Combine the date and time
    mutate(datetime = ymd_hm(paste(date, time))) |>
    # Convert to Unix timestamps
    mutate(unix_timestamp = as.numeric(as.POSIXct(datetime)))
  
  # Select the relevant columns
  timestamps_df <- timestamps_df |>
    select(date, time, unix_timestamp)
  
  # Change Unix timestampt to character for API request
  timestamps_df$unix_timestamp <- as.character(timestamps_df$unix_timestamp)
  
  return(timestamps_df)
}
```


# Data Preparation

## Creating Time Data

```{r}
# Set the years for analysis
year <- 2025

# Define the times of interest
times <- c(
          "9:00",
          "9:30",
          "10:00",
          "10:00",
          "10:30",
          "11:00",
          "11:30",
          "12:00",
          "12:30",
          "13:00",
          "13:30",
          "14:00",
          "14:30",
          "15:00",
          "15:30",
          "16:00",
          "16:30",
          "17:00"
          )

# Define the sample size per day of week (e.g., 10 samples each per Mon/Tue/Wed/Thu/Fri/Sat/Sun)
sample_size_per_day <- 52

# Set the seed for reproducibility
set.seed(123)

# Create a dataframe of timestamps for the specified years, times, and months
timestamps_df <- create_sample_timestamps(year, times, sample_size_per_day)

# Extract the day of the week from the date
timestamps_df <- timestamps_df |>
  mutate(day = wday(date, label = TRUE))

# Confirm sampling works as intended
timestamps_df |>
  group_by(day, time) |>
  summarise(n = n()) |>
  filter(n < sample_size_per_day | n > sample_size_per_day)
```

## Processing Cycle Route Data

```{r}
# List all route files in the data directory
route_files <- list.files(in_path, pattern = "*_route.xlsx", full.names = TRUE)

# Load the route data
route_data <- map(route_files, readxl::read_xlsx) |>
  bind_rows()

# Create a dataframe that includes all combinations of routes and timestamps
route_data <- crossing(route_data, timestamps_df)
```

## Creating Route Subsets for Query

```{r}
# Select relevant dates
dates <- seq(as.Date("2025-02-03"), as.Date("2025-02-04"), by = "day")

route_data <- route_data |>
    date %in% dates
  filter(
  )

# Create list of dataframes separated by route and date
df_list <- split(route_data, list(route_data$date, route_data$route))
```

## Extracting Distance Matrix Data

```{r}
# Get traffic data

# Set Google key
google_key <- rstudioapi::askForPassword("Google API Key")

df_1 <- df_list[[1]] |>
  mutate(
    traffic_data = pmap(list(origin, destination, unix_timestamp), get_distance_matrix)
  ) |>
  mutate(
    traffic_duration_min = map_dbl(traffic_data, ~.$traffic_duration_min),
    distance_meters = map_dbl(traffic_data, ~.$distance_meters),
    duration = map_dbl(traffic_data, ~.$duration)
  )

write_rds(df_1, paste0(out_path, "pre-processed/", names(df_list)[1], ".rds"))

df_2 <- df_list[[2]] |>
  mutate(
    traffic_data = pmap(list(origin, destination, unix_timestamp), get_distance_matrix)
  ) |>
  mutate(
    traffic_duration_min = map_dbl(traffic_data, ~.$traffic_duration_min),
    distance_meters = map_dbl(traffic_data, ~.$distance_meters),
    duration = map_dbl(traffic_data, ~.$duration)
  )

write_rds(df_2, paste0(out_path, "pre-processed/", names(df_list)[2], ".rds"))

df_3 <- df_list[[3]] |>
  mutate(
    traffic_data = pmap(list(origin, destination, unix_timestamp), get_distance_matrix)
  ) |>
  mutate(
    traffic_duration_min = map_dbl(traffic_data, ~.$traffic_duration_min),
    distance_meters = map_dbl(traffic_data, ~.$distance_meters),
    duration = map_dbl(traffic_data, ~.$duration)
  )

write_rds(df_3, paste0(out_path, "pre-processed/", names(df_list)[3], ".rds"))

df_4 <- df_list[[4]] |>
  mutate(
    traffic_data = pmap(list(origin, destination, unix_timestamp), get_distance_matrix)
  ) |>
  mutate(
    traffic_duration_min = map_dbl(traffic_data, ~.$traffic_duration_min),
    distance_meters = map_dbl(traffic_data, ~.$distance_meters),
    duration = map_dbl(traffic_data, ~.$duration)
  )

write_rds(df_4, paste0(out_path, "pre-processed/", names(df_list)[4], ".rds"))

df_5 <- df_list[[5]] |>
  mutate(
    traffic_data = pmap(list(origin, destination, unix_timestamp), get_distance_matrix)
  ) |>
  mutate(
    traffic_duration_min = map_dbl(traffic_data, ~.$traffic_duration_min),
    distance_meters = map_dbl(traffic_data, ~.$distance_meters),
    duration = map_dbl(traffic_data, ~.$duration)
  )

write_rds(df_5, paste0(out_path, "pre-processed/", names(df_list)[5], ".rds"))

```

## Data Cleaning

```{r}
# Load the traffic data
north_files <- list.files(paste0(out_path, "pre-processed"), pattern = "north", full.names = TRUE, ignore.case = TRUE)
central_files <- list.files(paste0(out_path, "pre-processed"), pattern = "central", full.names = TRUE, ignore.case = TRUE)
south_files <- list.files(paste0(out_path, "pre-processed"), pattern = "south", full.names = TRUE, ignore.case = TRUE)

north_dfs <- map(north_files, read_rds)
central_dfs <- map(central_files, read_rds)
south_dfs <- map(south_files, read_rds)

north_df <- bind_rows(north_dfs)
central_df <- bind_rows(central_dfs)
south_df <- bind_rows(south_dfs)

full_df <- bind_rows(north_df, central_df, south_dfs)

# Check for missing values
full_df |>
  select(traffic_duration_min, distance_meters, duration) |>
  map_dbl(~sum(is.na(.)))

# Show rows with missing values
full_df |>
  filter(is.na(traffic_duration_min) | is.na(distance_meters) | is.na(duration))
```



```{r}
# Change estimated values to NA for pedestrian routes
full_df <- full_df |>
  mutate(
    traffic_duration_min = case_when(
      pedestrian == 1 ~ NA_real_,
      TRUE ~ traffic_duration_min
    ),
    distance_meters = case_when(
      pedestrian == 1 ~ NA_real_,
      TRUE ~ distance_meters
    ),
    duration = case_when(
      pedestrian == 1 ~ NA_real_,
      TRUE ~ duration
    )
  )
```



```{r}
# Check for potential errors of non-pedestrian routes generated by API by calculating difference between expected and actual distance
full_df <- full_df |>
  mutate(
    distance_diff = abs(distance_meters - expected_distance_meters),
    distance_diff = case_when(
      pedestrian == 1 ~ 0, # Set distance difference to 0 for pedestrian routes
      TRUE ~ distance_diff
    )
  )

# Plot histogram of errors for non-pedestrian routes
full_df |>
  filter(pedestrian != 1) |>
  ggplot(aes(distance_diff)) +
  geom_histogram(bins = 20, fill = "skyblue", color = "black") +
  labs(title = "Distribution of Distance Differences",
       x = "Distance Difference (meters)",
       y = "Frequency") +
  facet_wrap(~route, scales = "free")
```



```{r}
# Find outliers of difference in expected and estimated distance

# Find the upper percentile of distance difference for each route
upper_bound <- full_df |>
  group_by(route) |>
  summarise(upper_quantile = quantile(distance_diff, probs = 0.95, na.rm = TRUE))

# If the distance difference is greater than the upper bound, it is likely that the route is incorrect.
# These will be changes to NAs

full_df <- full_df |>
  left_join(upper_bound, by = "route") |>
  mutate(
    traffic_duration_min = case_when(
      distance_diff >= upper_quantile ~ NA_real_,
      TRUE ~ traffic_duration_min
    ),
    
    distance_meters = case_when(
      distance_diff >= upper_quantile ~ NA_real_,
      TRUE ~ distance_meters
    ),
    
    duration = case_when(
      distance_diff >= upper_quantile ~ NA_real_,
      TRUE ~ duration
    )
  )

# Check for missing values
full_df |>
  select(traffic_duration_min, distance_meters, duration) |>
  map_dbl(~sum(is.na(.)))

# Find roads with missing values
full_df |>
  group_by(route, road, pedestrian) |>
  summarise(
    sum_NAs = sum(is.na(traffic_duration_min) | is.na(distance_meters) | is.na(duration)),
    sum_Available = sum(!is.na(traffic_duration_min) & !is.na(distance_meters) & !is.na(duration))
  )
```

# Data Analysis

## Calculate Traffic Severity Indices

```{r}
# Select dates for analysis
traffic_df <- full_df |>
  filter(date != "2024-10-30" & date != "2024-11-02" & date != "2024-11-03") # Filter dates on which trials were run

# Calculate total duration and traffic duration for each road on each sampled date and time
traffic_df <- traffic_df |>
  group_by(route, road, pedestrian, date, day, time) |>
  summarise(
    sum_duration = sum(duration, na.rm = TRUE),
    sum_traffic_duration = sum(traffic_duration_min, na.rm = TRUE)
  )

# Calculate travel time index and traffic delay ratio
traffic_df <- traffic_df |>
  mutate(
    traffic_delay_ratio = traffic_delay_ratio(sum_traffic_duration, sum_duration),
    travel_time_index = travel_time_index(sum_traffic_duration, sum_duration)
  )
```

# Data Visualization

## Plot TTI, Road, Time

```{r}
# Calculate median TTI for each road at each time
tti_time <- traffic_df |>
  group_by(route, road, pedestrian, time) |>
  summarise(
    median_travel_time_index = round(median(travel_time_index, na.rm = TRUE), 2)
  )

# North route
north_raster <- tti_time |>
  filter(route == "North" & pedestrian != 1 & !is.na(median_travel_time_index)) |>
  mutate(road = as.factor(road)) |>
  ggplot(aes(x = road, y = time)) +
  geom_raster(aes(fill = median_travel_time_index)) +
  labs(title = "Traffic Time Index (TTI) on Non-Pedestrian Routes",
       subtitle = "North Loop",
       x = "Road",
       y = "Time of Day",
       fill = "TTI") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
    axis.text.y = element_text(size = 14),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.title.y = element_text(size = 14, face = "bold"),
    plot.title = element_text(face = "bold", size = 18),
    plot.subtitle = element_text(face = "italic", size = 16),
    legend.title = element_text(size = 16),
    legend.text = element_text(size = 14)
    ) +
  scale_fill_distiller(palette = "Spectral", na.value = "grey90", limits = c(0.8, 2.1))

ggsave(paste0(fig_path, "north_raster.png"), plot = north_raster, width = 10, height = 8, units = "in")

# South route
south_raster <- tti_time |>
  filter(route == "South" & pedestrian != 1 & !is.na(median_travel_time_index)) |>
  mutate(road = as.factor(road)) |>
  ggplot(aes(x = road, y = time)) +
  geom_raster(aes(fill = median_travel_time_index)) +
  labs(title = "Traffic Time Index (TTI) on Non-Pedestrian Routes",
       subtitle = "Central Loop",
       x = "Road",
       y = "Time of Day",
       fill = "TTI") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
    axis.text.y = element_text(size = 14),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.title.y = element_text(size = 14, face = "bold"),
    plot.title = element_text(face = "bold", size = 18),
    plot.subtitle = element_text(face = "italic", size = 16),
    legend.title = element_text(size = 16),
    legend.text = element_text(size = 14)
    ) +
  scale_fill_distiller(palette = "Spectral", na.value = "grey90", limits = c(0.8, 2.1))

ggsave(paste0(fig_path, "central_raster.png"), plot = south_raster, width = 10, height = 8, units = "in")

# East route
east_raster <- tti_time |>
  filter(route == "East" & pedestrian != 1 & !is.na(median_travel_time_index)) |>
  mutate(road = as.factor(road)) |>
  ggplot(aes(x = road, y = time)) +
  geom_raster(aes(fill = median_travel_time_index)) +
  labs(title = "Traffic Time Index (TTI) on Non-Pedestrian Routes",
       subtitle = "South Loop",
       x = "Road",
       y = "Time of Day",
       fill = "TTI") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
    axis.text.y = element_text(size = 14),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.title.y = element_text(size = 14, face = "bold"),
    plot.title = element_text(face = "bold", size = 18),
    plot.subtitle = element_text(face = "italic", size = 16),
    legend.title = element_text(size = 16),
    legend.text = element_text(size = 14)
    ) +
  scale_fill_distiller(palette = "Spectral", na.value = "grey90", limits = c(0.8, 2.1))

ggsave(paste0(fig_path, "south_raster.png"), plot = east_raster, width = 10, height = 8, units = "in")
```

```{r}
tti_raster <- tti_time |>
  filter(pedestrian != 1 & !is.na(median_travel_time_index)) |>
  ggplot(aes(x = road, y = time)) +
  geom_raster(aes(fill = median_travel_time_index)) +
  labs(title = "Traffic Time Index by Route",
       subtitle = "Non-Pedestrian Routes",
       x = "Road",
       y = "Time of Day",
       fill = "Travel Time Index") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(face = "bold", size = 12),
    plot.subtitle = element_text(face = "italic", size = 10)
    ) +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
  facet_wrap(~route, nrow = 2, scales = "free")

ggsave(paste0(fig_path, "tti_raster.png"), plot = tti_raster, width = 10, height = 10, units = "in")
```

