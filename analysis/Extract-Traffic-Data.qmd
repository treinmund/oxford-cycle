---
title: "Extract Traffic Data"
format: html
---

# Set-up

## Load Packages

```{r}
# Load required packages. If a package is missing, install it first.
packages <- c("httr", "jsonlite", "tidyverse", "lubridate", "keyring")

# Install missing packages
missing_packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(missing_packages)) install.packages(missing_packages)

# Load all packages
lapply(packages, library, character.only = TRUE)
```

## Set File Paths

```{r}
# Define input, output, and figure directories for reproducibility
# Ensure these directories exist before running the script

in_path <- "../input/"       # Path to input data files
out_path <- "../results/"  # Path to save results
fig_path <- "../figures/"  # Path to save figures
```

# Define Functions

## Google Maps Distance Matrix API Function

```{r}
get_distance_matrix <- function(origin, destination, departure_time) {
  # Function to retrieve traffic duration from Google Maps Distance Matrix API
  # Arg: origin (character) - the starting location
  # Arg: destination (character) - the destination location
  # Arg: departure_time (character) - the departure time for the trip
  
  
  # Add a delay to avoid hitting the API rate limit
  Sys.sleep(0.5)
  
  # Construct the API request URL
  url <- paste0(
    "https://maps.googleapis.com/maps/api/distancematrix/json?",
    "origins=", URLencode(origin, reserved = TRUE),
    "&destinations=", URLencode(destination, reserved = TRUE),
    "&departure_time=", URLencode(departure_time),
    "&traffic_model=best_guess",  # Use "best_guess", "pessimistic", or "optimistic"
    "&key=", google_key
  )
  
  # Print URL for troubleshooting
  print(url)
  
  # Use tryCatch to handle errors
  result <- tryCatch({
    
    # Make the GET request to the Google Maps API
    response <- GET(url)
    
    # Check if the request was successful
    if (status_code(response) != 200) {
      warning("Failed to retrieve data from Google API. Status code: ", status_code(response))
      print(url)
    }
    
    # Parse the response content
    data <- content(response, as = "parsed")
    
    # Extract traffic data (duration and distance with traffic)
    if (is.null(data$rows[[1]]$elements[[1]]$duration_in_traffic)) {
      warning("No traffic data available for the specified route.")
      return(NULL)
    }
    
    destination_address <- data$destination_addresses[[1]]
    traffic_duration <- data$rows[[1]]$elements[[1]]$duration_in_traffic$value # Traffic duration in seconds
    duration <- data$rows[[1]]$elements[[1]]$duration$value  # Duration without traffic in seconds
    distance <- data$rows[[1]]$elements[[1]]$distance$value  # Distance in meters
    
    # Convert seconds to minutes for readability
    traffic_duration_min <- traffic_duration / 60
    duration_min <- duration / 60
    
    # Return a list with traffic data
    list(
      origin = origin,
      destination = destination,
      traffic_duration_min = traffic_duration_min,
      distance_meters = distance,
      duration_min = duration_min
    )
  }, 
  error = function(e) {
    # Handle errors by returning a message and the error details
    message("An error occurred: ", e$message)
    return(list(
      origin = origin,
      destination = destination,
      traffic_duration_min = NA,
      distance_meters = NA,
      duration_min = NA,
      error_message = e$message
    ))
  })
  return(result)
}

```

## Example usage of the function

```{r}
## Set the origin, destination, and departure time
origin <- "William Baker House, Broad St, Oxford OX1 3AF"  # Example: Oxford, UK (latitude,longitude)
destination <- "11-12 Broad St, Oxford OX1 3AS"  # Example: London, UK (latitude,longitude)
departure_time <- "now"  # Example: "now" or a Unix timestamp

## Get traffic data
traffic_data <- get_distance_matrix(origin, destination, departure_time)
print(traffic_data)
```

## Timestamp Sampling Function

```{r}
create_sample_timestamps <- function(year, times, sample_size = NULL) {
  # This function creates a dataframe of sampled timestamps which will be used for estimating traffic levels
  # at different times of the day throughout the year.
  # Arg: year (numeric) - the year for which to generate timestamps
  # Arg: times (character vector) - the times of day to sample
  # Arg: sample_size (numeric, optional) - the number of dates to sample for each day of the week
  
  # Generate a sequence of dates for the entire year
  dates <- seq.Date(from = as.Date(paste0(year, "-01-01")),
                    to = as.Date(paste0(year, "-12-31")),
                    by = "day")
  
  # Check if sample_size argument is provided
  if (missing(sample_size)) {
    sample_size <- length(dates)
  }
  
  # Select random sample of dates for each day of week
  sample_dates <- dates |>
    as_tibble() |>
    mutate(day = wday(value, label = TRUE)) |>
    group_by(day) |>
    sample_n(sample_size) |>
    pull(value)

  # Create a dataframe by combining dates and times
  timestamps_df <- expand.grid(date = sample_dates, time = times) |>
    # Combine the date and time
    mutate(datetime = ymd_hm(paste(date, time))) |>
    # Convert to Unix timestamps
    mutate(unix_timestamp = as.numeric(as.POSIXct(datetime)))
  
  # Select the relevant columns
  timestamps_df <- timestamps_df |>
    select(date, time, unix_timestamp)
  
  # Change Unix timestampt to character for API request
  timestamps_df$unix_timestamp <- as.character(timestamps_df$unix_timestamp)
  
  return(timestamps_df)
}
```

# Retrieve Google Traffic Data

## Creating Time Data

```{r}
# Set the years for analysis
year <- 2025

# Define the times of interest
times <- c(
          "9:00",
          "9:30",
          "10:00",
          "10:00",
          "10:30",
          "11:00",
          "11:30",
          "12:00",
          "12:30",
          "13:00",
          "13:30",
          "14:00",
          "14:30",
          "15:00",
          "15:30",
          "16:00",
          "16:30",
          "17:00"
          )

# Define the sample size per day of week (e.g., 10 samples each per Mon/Tue/Wed/Thu/Fri/Sat/Sun)
sample_size_per_day <- 52

# Set the seed for reproducibility
set.seed(123)

# Create a dataframe of timestamps for the specified years, times, and months
timestamps_df <- create_sample_timestamps(year, times, sample_size_per_day)

# Extract the day of the week from the date
timestamps_df <- timestamps_df |>
  mutate(day = wday(date, label = TRUE))

# Confirm sampling works as intended
timestamps_df |>
  group_by(day, time) |>
  summarise(n = n()) |>
  filter(n < sample_size_per_day | n > sample_size_per_day)
```

## Processing Cycle Route Data

```{r}
# List all route files in the data directory
route_files <- list.files(in_path, pattern = "*_route.xlsx", full.names = TRUE)

# Load the route data
route_data <- map(route_files, readxl::read_xlsx) |>
  bind_rows()

# Create a dataframe that includes all combinations of routes and timestamps
route_data <- crossing(route_data, timestamps_df)
```

## Creating Route Subsets for Query

```{r}
# Select relevant dates
#dates <- seq(as.Date("2025-02-03"), as.Date("2025-02-04"), by = "day")

#route_data <- route_data |>
#    date %in% dates
#  filter(
#  )
  
routes <- c("Central", "South")
  
route_data <- route_data |>
  filter(date == "2025-02-14" & route %in% routes)

# Create list of dataframes separated by route and date
df_list <- split(route_data, list(route_data$date, route_data$route))
```

## Extracting Distance Matrix Data

```{r}
# Get traffic data

# Set Google key
google_key <- rstudioapi::askForPassword("Google API Key")

df_1 <- df_list[[1]] |>
  mutate(
    traffic_data = pmap(list(origin, destination, unix_timestamp), get_distance_matrix)
  ) |>
  mutate(
    traffic_duration_min = map_dbl(traffic_data, ~.$traffic_duration_min),
    distance_meters = map_dbl(traffic_data, ~.$distance_meters),
    duration = map_dbl(traffic_data, ~.$duration)
  )

write_rds(df_1, paste0(out_path, "pre-processed/", names(df_list)[1], ".rds"))

df_2 <- df_list[[2]] |>
  mutate(
    traffic_data = pmap(list(origin, destination, unix_timestamp), get_distance_matrix)
  ) |>
  mutate(
    traffic_duration_min = map_dbl(traffic_data, ~.$traffic_duration_min),
    distance_meters = map_dbl(traffic_data, ~.$distance_meters),
    duration = map_dbl(traffic_data, ~.$duration)
  )

write_rds(df_2, paste0(out_path, "pre-processed/", names(df_list)[2], ".rds"))
```

## Geocoding Route Data

```{r}
# Geocode the start and end locations of the routes
route_data <- route_data |>
  mutate(
    start_geocode = geocode(origin),
    end_geocode = geocode(destination)
  )

write_rds(route_data, paste0(out_path, "processed/", "geocoded_route_data.rds"))
```

